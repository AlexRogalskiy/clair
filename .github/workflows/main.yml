---
name: CI

on:
  push:
    branches:
      - main
      - release-4.*
  pull_request:
    branches:
      - main
      - release-4.*

jobs:
  config:
    runs-on: ubuntu-latest
    outputs:
      go_versions: ${{ steps.config.outputs.go_versions }}
    steps:
      - id: config
        run: |
          echo 'go_versions=["1.20"]' >> "$GITHUB_OUTPUT"

  commit-check:
    name: Commit Check
    runs-on: ubuntu-latest
    steps:
      - name: commit check
        uses: gsactions/commit-message-checker@v2
        with:
          pattern: |
            ^(.*):\s*(.*)\n.*$
          error: 'Commit must begin with <scope>: <subject>'
          flags: 'gm'
          excludeTitle: true
          excludeDescription: true
          checkAllCommitMessages: true
          accessToken: ${{ secrets.GITHUB_TOKEN }}

  api-reference-check:
    name: API Reference Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: gen api reference
        run: |
          npx widdershins --search false --language_tabs 'python:Python' 'go:Golang' 'javascript:Javascript' --summary ./openapi.yaml -o ./Documentation/reference/api.md
      - name: diff
        run: |
          git diff --exit-code

  tidy:
    name: Tidy
    needs: ['config']
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go:
          - ${{ fromJSON(needs.config.outputs.go_versions)[0] }}
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - uses: actions/checkout@v3
      - uses: ./.github/actions/go-tidy
        with:
          go: ${{ matrix.go }}

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/documentation
        with:
          publish: false

  tests:
    name: Integration Tests
    needs: ['config']
    runs-on: ubuntu-latest
    services:
      postgres:
        image: docker.io/library/postgres:11
        env:
          POSTGRES_DB: "clair"
          POSTGRES_INITDB_ARGS: "--no-sync"
          POSTGRES_PASSWORD: password
          POSTGRES_USER: "clair"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432
      rabbitmq:
        image: docker.io/library/rabbitmq:3
        env:
          RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: '-rabbit vm_memory_high_watermark 0.85'
        ports:
          - 5672
          - 61613

    strategy:
      matrix:
        go: ${{ fromJSON(needs.config.outputs.go_versions) }}
    steps:
      - name: Configure RabbitMQ
        run: |
          docker exec ${{ job.services.rabbitmq.id }} rabbitmqctl await_startup
          docker exec ${{ job.services.rabbitmq.id }} rabbitmq-plugins enable rabbitmq_stomp
          docker exec ${{ job.services.rabbitmq.id }} rabbitmq-plugins disable rabbitmq_management_agent rabbitmq_prometheus rabbitmq_web_dispatch
          docker exec ${{ job.services.rabbitmq.id }} rabbitmqctl add_vhost '::1'
          docker exec ${{ job.services.rabbitmq.id }} rabbitmqctl set_permissions -p '::1' guest '.*' '.*' '.*'
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - run: go test -tags integration ./...
        env:
          POSTGRES_CONNECTION_STRING: "host=localhost port=${{ job.services.postgres.ports[5432] }} user=clair dbname=clair password=password sslmode=disable"
          RABBITMQ_CONNECTION_STRING: "amqp://guest:guest@localhost:${{ job.services.rabbitmq.ports[5672] }}/"
          STOMP_CONNECTION_STRING: "stomp://guest:guest@localhost:${{ job.services.rabbitmq.ports[61613] }}/"
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: workspace-${{matrix.go}}
          path: ${{ github.workspace }}
